package com.fld.init.aop;import java.util.Random;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.MDC;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.springframework.stereotype.Component;import com.alibaba.dubbo.rpc.RpcContext;import com.fld.framework.dto.Device;import com.fld.framework.dto.Proxy;import com.fld.framework.dto.api.ApiReq;import com.fld.framework.dto.api.ApiReqContent;import com.fld.framework.util.JacksonUtils;import com.fld.init.framework.runtime.FullPathHolder;import com.fld.init.framework.runtime.UrlHeaderExt;import com.fld.init.framework.util.LogUtils;/** * 本应用提供的aop *  * @author * */@Aspect@Componentpublic class ServiceRpcAdvice {  @Around("execution (* com.fld.init.service.impl..*.*(..))")  public Object transmitParams(ProceedingJoinPoint jp) throws Throwable {    String reqStr = "[RPC CORE][" + jp.getSignature().getDeclaringType().getSimpleName() + "."        + jp.getSignature().getName() + "]";    if (!FullPathHolder.isHttpRequest()) {      Long curTime = System.currentTimeMillis();      Random random = new Random();      /** 同一个请求，唯一标示 */      MDC.put("requestId", "[" + curTime + "-" + random.nextInt() + "] ");      String arc = RpcContext.getContext().getAttachment(ApiReqContent.class.getName());      if (StringUtils.isNotBlank(arc)) {        ApiReqContent ac = JacksonUtils.readValue(arc, ApiReqContent.class);        if (null != ac) {          FullPathHolder.setHeader(null == ac.getHeader() ? new UrlHeaderExt() : ac.getHeader());          FullPathHolder.setDevice(null == ac.getDevice() ? new Device() : ac.getDevice());          FullPathHolder.setProxy(null == ac.getProxy() ? new Proxy() : ac.getProxy());        } else {          FullPathHolder.setHeader(new UrlHeaderExt());          FullPathHolder.setDevice(new Device());          FullPathHolder.setProxy(new Proxy());        }      }    }    // 测试性能    long test_api_time_start = System.currentTimeMillis();    // 结果    Object result = null;    // 检查参数    try {      Object[] args = jp.getArgs();      StringBuffer argsStr = new StringBuffer("[");      if (null != args && args.length > 0) {        for (Object object : args) {          if (object instanceof ApiReq) {            ApiReqContent ar = ((ApiReq) object).getApiReqContent();            if (null == ar.getHeader()) {              ar.setHeader(FullPathHolder.getHeader());            }            if (null == ar.getDevice()) {              ar.setDevice(FullPathHolder.getDevice());            }            if (null == ar.getProxy()) {              ar.setProxy(FullPathHolder.getProxy());            }            argsStr.append(object.toString());          } else {            argsStr.append(JacksonUtils.toJson(args));          }          argsStr.append(",");        }        argsStr.deleteCharAt(argsStr.length() - 1);      }      argsStr.append("]");      reqStr = reqStr + "[rpc Args]" + argsStr;    } catch (Throwable e1) {      LogUtils.error("rcp record log", e1);    }    // rpc 异常    Throwable e = null;    // 检查通过后执行    if (null == result) {      try {        result = jp.proceed();      } catch (Throwable e1) {        e = e1;      }    }    LogUtils.serviceRpcLog(        reqStr + "[rpc result]" + result + (null == e ? "" : ("[rpc throwable]" + e.toString())));    // 测试性能打开    LogUtils.perfLog("AOP|CORE|" + jp.getSignature().toShortString() + "|"        + (System.currentTimeMillis() - test_api_time_start));    // rpc 异常 抛出    if (null != e) {      LogUtils.error("rpc core aop", e);      throw e;    }    return result;  }}